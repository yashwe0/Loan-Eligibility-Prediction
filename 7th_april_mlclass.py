# -*- coding: utf-8 -*-
"""7th april MLClass.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TY29mxDUp-t67QY_L-bStzFBn41lx6wB

Loan Eligibility predicition EDA
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

"""**making model -> training data


testing the accuracy -> testing data**
"""

dataset = pd.read_csv('/content/train.csv')
#s = read_csv('/content/test.csv')

dataset.head(15)

dataset.shape

dataset.info()

dataset.describe()

pd.crosstab(dataset['Credit_History'], dataset['Loan_Status'], margins = True)

#loan _status

sns.countplot(x=dataset['Loan_Status'], hue=dataset['Loan_Status'])

"""192 people - Loan got rejected
400 people - Loan accepted
"""

#gender
gender_counts = dataset['Gender'].value_counts()

plt.pie(gender_counts, labels = gender_counts.index, autopct = '%1.1f%%')

"""81.4% male --> Loan
18.6% females --> loan
"""

#education

sns.countplot(x= dataset['Education'], hue = dataset['Education'])

#property area

graph = sns.countplot(x= dataset['Property_Area'], hue = dataset['Property_Area'])
total = len(dataset['Property_Area'])

for p in graph.patches:
  height = p.get_height()
  graph.annotate(f'{height/total:.1%}',(p.get_x()+ p.get_width()/2., height/2), ha = 'center', va = 'center', fontsize = 10, color = 'white')

# applicant income

dataset.boxplot(column = 'ApplicantIncome')

dataset['ApplicantIncome'].hist(bins=20)

#coapplicant income

plt.figure(figsize=(8,6))
sns.swarmplot(y=dataset['CoapplicantIncome'])

dataset['CoapplicantIncome'].hist(bins =20)

#Loan amount

plt.figure(figsize=(8,6))

sns.histplot(dataset['LoanAmount'], kde = True)

dataset.boxplot(column='LoanAmount')

dataset['LoanAmount'].hist(bins=20)

#loan amount term

plt.figure(figsize = (10,7))
sns.countplot(x=dataset['Loan_Amount_Term'], hue=dataset['Loan_Amount_Term'])

# Applicant Income vs Education

dataset.boxplot(column = 'ApplicantIncome', by='Education')

#Normalization

dataset['LoanAmount_log'] = np.log(dataset['LoanAmount'])

dataset['LoanAmount_log'].hist(bins = 20)

dataset['totalincome']=dataset['ApplicantIncome']+dataset['CoapplicantIncome']
dataset['totalincome_log']=np.log(dataset['totalincome'])

dataset['totalincome_log'].hist(bins = 20)

dataset.head()

#handling outliers

col_outliers = ['LoanAmount', 'ApplicantIncome', 'Loan_Amount_Term', 'CoapplicantIncome']

for col in col_outliers:
  fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(15,4))
  sns.histplot(data=dataset, x = col, bins= 20, kde = True, ax=ax1)
  sns.boxplot(data = dataset, x=col,ax=ax2 )
  ax1.set_title(f'Histogram and Boxplot of {col}', size = 15, weight = 'bold')
  plt.show()

def remove_outlier(data, col, k=1.5):
  for c in col:
    q1 = data[c].quantile(0.25)
    q3 = data[c].quantile(0.75)
    iqr = q3-q1
    lower_bound = q1 - k*iqr
    upper_bound = q3 + k*iqr
    data = data[(data[c]>=lower_bound) & (data[c]<=upper_bound)]

  return data

col_outliers = ['LoanAmount', 'ApplicantIncome', 'Loan_Amount_Term', 'CoapplicantIncome']

data = remove_outlier(dataset, col_outliers)

#missing values

dataset.isnull().sum()

mode_value = dataset['Gender'].mode()[0]
dataset['Gender'] = dataset['Gender'].fillna(mode_value)

mode_value = dataset['Married'].mode()[0]
dataset['Married'] = dataset['Married'].fillna(mode_value)

mode_value = dataset['Dependents'].mode()[0]
dataset['Dependents'] = dataset['Dependents'].fillna(mode_value)

mode_value = dataset['Self_Employed'].mode()[0]
dataset['Self_Employed'] = dataset['Self_Employed'].fillna(mode_value)

mode_value = dataset['Credit_History'].mode()[0]
dataset['Credit_History'] = dataset['Credit_History'].fillna(mode_value)

dataset.LoanAmount = dataset.LoanAmount.fillna(dataset.LoanAmount.mean())
dataset.LoanAmount_log = dataset.LoanAmount_log.fillna(dataset.LoanAmount_log.mean())
dataset.Loan_Amount_Term = dataset.Loan_Amount_Term.fillna(dataset.Loan_Amount_Term.mean())

dataset.isnull().sum()

#Splitting the dataset

x = dataset.iloc[:, np.r_[1:5, 9:11, 13:15]].values

y = dataset.iloc[:, 12].values

x

y

from sklearn.model_selection import train_test_split
X_train, Y_train, X_test, Y_test = train_test_split(x, y, test_size=0.2, random_state = 0)

# Label Encoding

from sklearn.preprocessing import LabelEncoder
labelencoder_x = LabelEncoder()

for i in range(0,5):
  X_train[:, i]= labelencoder_x.fit_transform(X_train[:, i])

X_train[:, i ] = labelencoder_x.fit_transform(X_train[:, 7])

X_train